#{{ ansible_managed }}

# Set everything to be logged to the console
log4j.rootCategory={{ loglevel }}, console
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.err
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n

# Set the default spark-shell log level to ERROR. When running the spark-shell, the
# log level for this class is used to overwrite the root logger's log level, so that
# the user can have different defaults for the shell and regular Spark apps.
log4j.logger.org.apache.spark.repl.Main={{ loglevel }}

# Settings to quiet third party logs that are too verbose
log4j.logger.org.spark_project.jetty={{ loglevel }}
log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle={{ loglevel }}
log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper={{ loglevel }}
log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter={{ loglevel }}
log4j.logger.org.apache.parquet={{ loglevel }}
log4j.logger.parquet={{ loglevel }}

# SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs in SparkSQL with Hive support
log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler={{ loglevel }}
log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry={{ loglevel }}
